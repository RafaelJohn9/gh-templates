name: Release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish-cargo:
    name: Publish to Cargo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-binaries:
    name: Publish binaries
    runs-on: ${{ matrix.build.os }}
    needs: publish-cargo
    strategy:
      fail-fast: false
      matrix:
        build:
          - { NAME: linux-x64-glibc, OS: ubuntu-22.04, TARGET: x86_64-unknown-linux-gnu }
          - { NAME: linux-x64-musl, OS: ubuntu-22.04, TARGET: x86_64-unknown-linux-musl }
          - { NAME: linux-arm64-glibc, OS: ubuntu-22.04, TARGET: aarch64-unknown-linux-gnu }
          - { NAME: win32-x64-msvc, OS: windows-latest, TARGET: x86_64-pc-windows-msvc }
          - { NAME: darwin-x64, OS: macos-15, TARGET: x86_64-apple-darwin }
          - { NAME: darwin-arm64, OS: macos-15, TARGET: aarch64-apple-darwin }

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.build.TARGET }}

      - name: Install cross
        if: runner.os == 'Linux'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build and prepare (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          
          # Build
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cross build --release --target ${{ matrix.build.TARGET }}
          else
            cargo build --release --target ${{ matrix.build.TARGET }}
          fi
          
          # Copy binary
          BINARY="gh-templates"
          cp target/${{ matrix.build.TARGET }}/release/$BINARY .
          chmod +x $BINARY
          
          # Create packages
          mkdir -p npm/bin python/gh_templates_bin
          cp $BINARY npm/bin/
          cp $BINARY python/gh_templates_bin/
          
          # npm package.json
          cat > npm/package.json << EOF
          {
            "name": "@rafaeljohn9/gh-templates-${{ matrix.build.NAME }}",
            "version": "$VERSION",
            "bin": { "gh-templates": "./bin/$BINARY" },
            "files": ["bin/"],
            "license": "Apache-2.0"
          }
          EOF
          
          # Python setup.py
          cat > python/setup.py << EOF
          from setuptools import setup
          setup(
              name='gh-templates-${{ matrix.build.NAME }}',
              version='$VERSION',
              packages=['gh_templates_bin'],
              package_data={'gh_templates_bin': ['*']},
              entry_points={'console_scripts': ['gh-templates=gh_templates_bin:main']},
              license='Apache-2.0'
          )
          EOF
          
          # Python __init__.py
          cat > python/gh_templates_bin/__init__.py << 'EOF'
          import os, sys, subprocess
          def main():
              binary = os.path.join(os.path.dirname(__file__), 'gh-templates')
              sys.exit(subprocess.run([binary] + sys.argv[1:]).returncode)
          EOF

      - name: Build and prepare (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VERSION = "${{ github.ref_name }}" -replace '^v', ''
          
          # Build
          cargo build --release --target ${{ matrix.build.TARGET }}
          
          # Copy binary
          $BINARY = "gh-templates.exe"
          Copy-Item "target/${{ matrix.build.TARGET }}/release/$BINARY" .
          
          # Create packages
          New-Item -ItemType Directory -Force -Path npm/bin, python/gh_templates_bin
          Copy-Item $BINARY npm/bin/
          Copy-Item $BINARY python/gh_templates_bin/
          
          # npm package.json
          @"
          {
            "name": "@rafaeljohn9/gh-templates-${{ matrix.build.NAME }}",
            "version": "$VERSION",
            "bin": { "gh-templates": "./bin/$BINARY" },
            "files": ["bin/"],
            "license": "Apache-2.0"
          }
          "@ | Out-File -FilePath npm/package.json -Encoding UTF8
          
          # Python setup.py
          @"
          from setuptools import setup
          setup(
              name='gh-templates-${{ matrix.build.NAME }}',
              version='$VERSION',
              packages=['gh_templates_bin'],
              package_data={'gh_templates_bin': ['*']},
              entry_points={'console_scripts': ['gh-templates=gh_templates_bin:main']},
              license='Apache-2.0'
          )
          "@ | Out-File -FilePath python/setup.py -Encoding UTF8
          
          # Python __init__.py
          @'
          import os, sys, subprocess
          def main():
              binary = os.path.join(os.path.dirname(__file__), 'gh-templates.exe')
              sys.exit(subprocess.run([binary] + sys.argv[1:]).returncode)
          '@ | Out-File -FilePath python/gh_templates_bin/__init__.py -Encoding UTF8

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: gh-templates*

      - name: Publish to npm
        if: matrix.build.NAME != 'linux-x64-musl'
        shell: bash
        run: |
          cd npm
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm publish --access public

      - name: Publish to PyPI
        shell: bash
        run: |
          cd python
          pip install twine
          python setup.py sdist bdist_wheel
          echo -e "[pypi]\nusername = __token__\npassword = ${{ secrets.PYPI_API_TOKEN }}" > ~/.pypirc
          twine upload dist/* --skip-existing

  publish-homebrew:
    name: Update Homebrew formula
    runs-on: macos-latest
    needs: publish-binaries
    steps:
      - name: Update Homebrew formula
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          
          # Get release assets
          LINUX_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gh-templates-linux-x64-glibc"
          DARWIN_ARM_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gh-templates-darwin-arm64"
          DARWIN_X64_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gh-templates-darwin-x64"
          
          # Calculate checksums
          wget -q $LINUX_URL -O linux-binary
          wget -q $DARWIN_ARM_URL -O darwin-arm-binary
          wget -q $DARWIN_X64_URL -O darwin-x64-binary
          
          LINUX_SHA=$(shasum -a 256 linux-binary | cut -d' ' -f1)
          DARWIN_ARM_SHA=$(shasum -a 256 darwin-arm-binary | cut -d' ' -f1)
          DARWIN_X64_SHA=$(shasum -a 256 darwin-x64-binary | cut -d' ' -f1)
          
          # Clone homebrew tap
          git clone https://github.com/rafaeljohn9/homebrew-tap.git
          cd homebrew-tap
          
          # Create/update formula
          cat > Formula/gh-templates.rb << EOF
          class GhTemplates < Formula
            desc "GitHub Templates CLI tool"
            homepage "https://github.com/${{ github.repository }}"
            version "$VERSION"
            
            on_macos do
              if Hardware::CPU.arm?
                url "$DARWIN_ARM_URL"
                sha256 "$DARWIN_ARM_SHA"
              else
                url "$DARWIN_X64_URL"
                sha256 "$DARWIN_X64_SHA"
              end
            end
            
            on_linux do
              url "$LINUX_URL"
              sha256 "$LINUX_SHA"
            end
            
            def install
              bin.install "gh-templates-darwin-arm64" => "gh-templates" if Hardware::CPU.arm?
              bin.install "gh-templates-darwin-x64" => "gh-templates" if Hardware::CPU.intel?
              bin.install "gh-templates-linux-x64-glibc" => "gh-templates" if OS.linux?
            end
          end
          EOF
          
          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/gh-templates.rb
          git commit -m "Update gh-templates to $VERSION"
          git push https://x-access-token:${{ secrets.HOMEBREW_GITHUB_TOKEN }}@github.com/rafaeljohn9/homebrew-tap.git