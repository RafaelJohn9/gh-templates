name: Release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish-cargo:
    name: Publish to Cargo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-binaries:
    name: Publish binaries
    runs-on: ${{ matrix.build.os }}
    needs: publish-cargo
    strategy:
      fail-fast: false
      matrix:
        build:
          - { 
              NAME: linux-x64-glibc, 
              OS: ubuntu-22.04, 
              TARGET: x86_64-unknown-linux-gnu,
              NPM_PUBLISH: true,
              PYPI_PUBLISH: true
            }
          - { 
              NAME: linux-x64-musl, 
              OS: ubuntu-22.04, 
              TARGET: x86_64-unknown-linux-musl,
              NPM_PUBLISH: false,
              PYPI_PUBLISH: true
            }
          - { 
              NAME: linux-arm64-glibc, 
              OS: ubuntu-22.04, 
              TARGET: aarch64-unknown-linux-gnu,
              NPM_PUBLISH: true,
              PYPI_PUBLISH: true
            }
          - { 
              NAME: win32-x64-msvc, 
              OS: windows-latest, 
              TARGET: x86_64-pc-windows-msvc,
              NPM_PUBLISH: true,
              PYPI_PUBLISH: true
            }
          - { 
              NAME: darwin-x64, 
              OS: macos-15, 
              TARGET: x86_64-apple-darwin,
              NPM_PUBLISH: true,
              PYPI_PUBLISH: true
            }
          - { 
              NAME: darwin-arm64, 
              OS: macos-15, 
              TARGET: aarch64-apple-darwin,
              NPM_PUBLISH: true,
              PYPI_PUBLISH: true
            }

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.build.TARGET }}

      - name: Install cross
        if: runner.os == 'Linux'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Set release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Build
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cross build --release --target ${{ matrix.build.TARGET }}
          else
            cargo build --release --target ${{ matrix.build.TARGET }}
          fi
          
          # Copy binary
          BINARY="gh-templates"
          cp target/${{ matrix.build.TARGET }}/release/$BINARY .
          chmod +x $BINARY

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Build
          cargo build --release --target ${{ matrix.build.TARGET }}
          
          # Copy binary
          $BINARY = "gh-templates.exe"
          Copy-Item "target/${{ matrix.build.TARGET }}/release/$BINARY" .

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: gh-templates*

      - name: Setup Node.js for NPM
        if: matrix.build.NPM_PUBLISH == true
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish platform-specific NPM package
        if: matrix.build.NPM_PUBLISH == true
        shell: bash
        run: |
          # Create platform-specific package directory
          BINARY="gh-templates"
          NODE_OS=$(echo "${{ matrix.build.NAME }}" | cut -d '-' -f1)
          NODE_ARCH=$(echo "${{ matrix.build.NAME }}" | cut -d '-' -f2)
          
          if [ "${{ runner.os }}" = "Windows" ]; then
            BINARY="${BINARY}.exe"
            NPM_PKG="gh-templates-windows-${NODE_ARCH}"
          else
            NPM_PKG="gh-templates-${NODE_OS}-${NODE_ARCH}"
          fi
          
          mkdir -p "${NPM_PKG}/bin"
          cp "${BINARY}" "${NPM_PKG}/bin/"
          cp README.md "${NPM_PKG}/" || echo "README.md not found, skipping"
          
          # Create package.json for platform-specific package
          cat > "${NPM_PKG}/package.json" << EOF
          {
            "name": "${NPM_PKG}",
            "version": "${{ env.RELEASE_VERSION }}",
            "description": "GitHub Templates CLI tool - ${NODE_OS} ${NODE_ARCH}",
            "bin": {
              "gh-templates": "./bin/${BINARY}"
            },
            "files": ["bin/"],
            "license": "Apache-2.0",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/${{ github.repository }}.git"
            },
            "os": ["${NODE_OS}"],
            "cpu": ["${NODE_ARCH}"]
          }
          EOF
          
          cd "${NPM_PKG}"
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build Python wheels (Linux)
        if: matrix.build.PYPI_PUBLISH == true && runner.os == 'Linux'
        run: |
          # Create wheel directory structure
          mkdir -p python/gh_templates_bin
          cp gh-templates python/gh_templates_bin/
          
          # Create setup.py
          cat > python/setup.py << EOF
          from setuptools import setup, find_packages
          import platform
          
          setup(
              name='gh-templates-${{ matrix.build.NAME }}',
              version='${{ env.RELEASE_VERSION }}',
              description='GitHub Templates CLI tool',
              packages=find_packages(),
              package_data={'gh_templates_bin': ['*']},
              entry_points={'console_scripts': ['gh-templates=gh_templates_bin:main']},
              license='Apache-2.0',
              classifiers=[
                  'Development Status :: 4 - Beta',
                  'Intended Audience :: Developers',
                  'License :: OSI Approved :: Apache Software License',
                  'Programming Language :: Python :: 3',
                  'Programming Language :: Python :: 3.7',
                  'Programming Language :: Python :: 3.8',
                  'Programming Language :: Python :: 3.9',
                  'Programming Language :: Python :: 3.10',
                  'Programming Language :: Python :: 3.11',
                  'Programming Language :: Python :: 3.12',
              ],
              python_requires='>=3.7',
          )
          EOF
          
          # Create __init__.py
          cat > python/gh_templates_bin/__init__.py << 'EOF'
          import os, sys, subprocess, stat
          def main():
              binary = os.path.join(os.path.dirname(__file__), 'gh-templates')
              if not os.path.exists(binary):
                  print(f"Error: Binary not found at {binary}")
                  sys.exit(1)
              # Ensure binary is executable
              os.chmod(binary, os.stat(binary).st_mode | stat.S_IEXEC)
              sys.exit(subprocess.run([binary] + sys.argv[1:]).returncode)
          EOF

      - name: Build Python wheels (macOS)
        if: matrix.build.PYPI_PUBLISH == true && runner.os == 'macOS'
        run: |
          # Create wheel directory structure
          mkdir -p python/gh_templates_bin
          cp gh-templates python/gh_templates_bin/
          
          # Create setup.py
          cat > python/setup.py << EOF
          from setuptools import setup, find_packages
          
          setup(
              name='gh-templates-${{ matrix.build.NAME }}',
              version='${{ env.RELEASE_VERSION }}',
              description='GitHub Templates CLI tool',
              packages=find_packages(),
              package_data={'gh_templates_bin': ['*']},
              entry_points={'console_scripts': ['gh-templates=gh_templates_bin:main']},
              license='Apache-2.0',
              classifiers=[
                  'Development Status :: 4 - Beta',
                  'Intended Audience :: Developers',
                  'License :: OSI Approved :: Apache Software License',
                  'Programming Language :: Python :: 3',
                  'Programming Language :: Python :: 3.7',
                  'Programming Language :: Python :: 3.8',
                  'Programming Language :: Python :: 3.9',
                  'Programming Language :: Python :: 3.10',
                  'Programming Language :: Python :: 3.11',
                  'Programming Language :: Python :: 3.12',
              ],
              python_requires='>=3.7',
          )
          EOF
          
          # Create __init__.py
          cat > python/gh_templates_bin/__init__.py << 'EOF'
          import os, sys, subprocess, stat
          def main():
              binary = os.path.join(os.path.dirname(__file__), 'gh-templates')
              if not os.path.exists(binary):
                  print(f"Error: Binary not found at {binary}")
                  sys.exit(1)
              # Ensure binary is executable
              os.chmod(binary, os.stat(binary).st_mode | stat.S_IEXEC)
              sys.exit(subprocess.run([binary] + sys.argv[1:]).returncode)
          EOF

      - name: Build Python wheels (Windows)
        if: matrix.build.PYPI_PUBLISH == true && runner.os == 'Windows'
        shell: pwsh
        run: |
          # Create wheel directory structure
          New-Item -ItemType Directory -Force -Path python/gh_templates_bin
          Copy-Item gh-templates.exe python/gh_templates_bin/
          
          # Create setup.py
          @"
          from setuptools import setup, find_packages
          
          setup(
              name='gh-templates-${{ matrix.build.NAME }}',
              version='${{ env.RELEASE_VERSION }}',
              description='GitHub Templates CLI tool',
              packages=find_packages(),
              package_data={'gh_templates_bin': ['*']},
              entry_points={'console_scripts': ['gh-templates=gh_templates_bin:main']},
              license='Apache-2.0',
              classifiers=[
                  'Development Status :: 4 - Beta',
                  'Intended Audience :: Developers',
                  'License :: OSI Approved :: Apache Software License',
                  'Programming Language :: Python :: 3',
                  'Programming Language :: Python :: 3.7',
                  'Programming Language :: Python :: 3.8',
                  'Programming Language :: Python :: 3.9',
                  'Programming Language :: Python :: 3.10',
                  'Programming Language :: Python :: 3.11',
                  'Programming Language :: Python :: 3.12',
              ],
              python_requires='>=3.7',
          )
          "@ | Out-File -FilePath python/setup.py -Encoding UTF8
          
          # Create __init__.py
          @'
          import os, sys, subprocess
          def main():
              binary = os.path.join(os.path.dirname(__file__), 'gh-templates.exe')
              if not os.path.exists(binary):
                  print(f"Error: Binary not found at {binary}")
                  sys.exit(1)
              sys.exit(subprocess.run([binary] + sys.argv[1:]).returncode)
          '@ | Out-File -FilePath python/gh_templates_bin/__init__.py -Encoding UTF8

      - name: Setup Python for PyPI
        if: matrix.build.PYPI_PUBLISH == true
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Publish to PyPI
        if: matrix.build.PYPI_PUBLISH == true
        shell: bash
        run: |
          cd python
          # Install required dependencies
          python -m pip install --upgrade pip setuptools wheel twine
          
          # Build the package
          python setup.py sdist bdist_wheel
          
          # Upload to PyPI
          python -m twine upload dist/* --skip-existing -u __token__ -p ${{ secrets.PYPI_API_TOKEN }}

  publish-python-unified:
    name: Publish unified Python package
    runs-on: ubuntu-latest
    needs: publish-binaries
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create unified Python package
        run: |
          mkdir -p python-unified/gh_templates_unified
          
          # Create setup.py for unified package
          cat > python-unified/setup.py << EOF
          from setuptools import setup, find_packages
          
          setup(
              name='gh-templates',
              version='${{ env.RELEASE_VERSION }}',
              description='GitHub Templates CLI tool - unified installer',
              packages=find_packages(),
              entry_points={'console_scripts': ['gh-templates=gh_templates_unified:main']},
              license='Apache-2.0',
              install_requires=[
                  'gh-templates-linux-x64-glibc==${{ env.RELEASE_VERSION }}; platform_system=="Linux" and platform_machine=="x86_64"',
                  'gh-templates-linux-x64-musl==${{ env.RELEASE_VERSION }}; platform_system=="Linux" and platform_machine=="x86_64"',
                  'gh-templates-linux-arm64-glibc==${{ env.RELEASE_VERSION }}; platform_system=="Linux" and platform_machine=="aarch64"',
                  'gh-templates-win32-x64-msvc==${{ env.RELEASE_VERSION }}; platform_system=="Windows" and platform_machine=="AMD64"',
                  'gh-templates-darwin-x64==${{ env.RELEASE_VERSION }}; platform_system=="Darwin" and platform_machine=="x86_64"',
                  'gh-templates-darwin-arm64==${{ env.RELEASE_VERSION }}; platform_system=="Darwin" and platform_machine=="arm64"',
              ],
              classifiers=[
                  'Development Status :: 4 - Beta',
                  'Intended Audience :: Developers',
                  'License :: OSI Approved :: Apache Software License',
                  'Programming Language :: Python :: 3',
                  'Programming Language :: Python :: 3.7',
                  'Programming Language :: Python :: 3.8',
                  'Programming Language :: Python :: 3.9',
                  'Programming Language :: Python :: 3.10',
                  'Programming Language :: Python :: 3.11',
                  'Programming Language :: Python :: 3.12',
              ],
              python_requires='>=3.7',
          )
          EOF
          
          # Create main module that delegates to platform-specific package
          cat > python-unified/gh_templates_unified/__init__.py << 'EOF'
          import sys
          import platform
          
          def main():
              try:
                  # Try to import the platform-specific package
                  system = platform.system()
                  machine = platform.machine()
                  
                  if system == "Linux":
                      if machine in ["x86_64", "AMD64"]:
                          try:
                              from gh_templates_bin import main as platform_main
                              platform_main()
                          except ImportError:
                              print("Error: Platform-specific package not found. Try: pip install gh-templates-linux-x64-glibc")
                              sys.exit(1)
                      elif machine in ["aarch64", "arm64"]:
                          from gh_templates_bin import main as platform_main
                          platform_main()
                      else:
                          print(f"Unsupported Linux architecture: {machine}")
                          sys.exit(1)
                  elif system == "Darwin":
                      from gh_templates_bin import main as platform_main
                      platform_main()
                  elif system == "Windows":
                      from gh_templates_bin import main as platform_main
                      platform_main()
                  else:
                      print(f"Unsupported platform: {system}-{machine}")
                      sys.exit(1)
              except ImportError as e:
                  print(f"Error: Could not import platform-specific gh-templates package: {e}")
                  print("Please ensure the correct platform-specific package is installed.")
                  sys.exit(1)
          EOF
          
          # Create empty __init__.py for package
          touch python-unified/gh_templates_unified/__init__.py
          
          # Install dependencies and publish
          cd python-unified
          python -m pip install --upgrade pip setuptools wheel twine
          python setup.py sdist bdist_wheel
          python -m twine upload dist/* --skip-existing -u __token__ -p ${{ secrets.PYPI_API_TOKEN }}

  publish-npm-unified:
    name: Publish unified NPM package
    runs-on: ubuntu-latest
    needs: publish-binaries
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create unified package
        run: |
          mkdir -p gh-templates-unified
          
          # Create package.json for the main package that depends on platform-specific ones
          cat > gh-templates-unified/package.json << EOF
          {
            "name": "gh-templates",
            "version": "${{ env.RELEASE_VERSION }}",
            "description": "GitHub Templates CLI tool",
            "bin": {
              "gh-templates": "./bin/gh-templates"
            },
            "scripts": {
              "postinstall": "node install.js"
            },
            "files": ["bin/", "install.js"],
            "license": "Apache-2.0",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/${{ github.repository }}.git"
            },
            "optionalDependencies": {
              "gh-templates-linux-x64": "${{ env.RELEASE_VERSION }}",
              "gh-templates-linux-arm64": "${{ env.RELEASE_VERSION }}",
              "gh-templates-darwin-x64": "${{ env.RELEASE_VERSION }}",
              "gh-templates-darwin-arm64": "${{ env.RELEASE_VERSION }}",
              "gh-templates-windows-x64": "${{ env.RELEASE_VERSION }}"
            },
            "peerDependencies": {
              "gh-templates-linux-x64": "${{ env.RELEASE_VERSION }}",
              "gh-templates-linux-arm64": "${{ env.RELEASE_VERSION }}",
              "gh-templates-darwin-x64": "${{ env.RELEASE_VERSION }}",
              "gh-templates-darwin-arm64": "${{ env.RELEASE_VERSION }}",
              "gh-templates-windows-x64": "${{ env.RELEASE_VERSION }}"
            },
            "peerDependenciesMeta": {
              "gh-templates-linux-x64": { "optional": true },
              "gh-templates-linux-arm64": { "optional": true },
              "gh-templates-darwin-x64": { "optional": true },
              "gh-templates-darwin-arm64": { "optional": true },
              "gh-templates-windows-x64": { "optional": true }
            }
          }
          EOF
          
          # Create install script that downloads the binary directly
          cat > gh-templates-unified/install.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const os = require('os');
          const https = require('https');
          
          const platform = os.platform();
          const arch = os.arch();
          const version = require('./package.json').version;
          
          let packageName;
          let binaryName = 'gh-templates';
          let downloadUrl;
          
          if (platform === 'win32') {
            packageName = 'gh-templates-windows-x64';
            binaryName = 'gh-templates.exe';
          } else if (platform === 'darwin') {
            packageName = arch === 'arm64' ? 'gh-templates-darwin-arm64' : 'gh-templates-darwin-x64';
          } else if (platform === 'linux') {
            packageName = arch === 'arm64' ? 'gh-templates-linux-arm64' : 'gh-templates-linux-x64';
          } else {
            console.error(`Unsupported platform: ${platform}-${arch}`);
            process.exit(1);
          }
          
          // First try to find the platform package (for local installs)
          const packagePath = path.join(__dirname, '..', packageName);
          const binDir = path.join(__dirname, 'bin');
          const targetBinary = path.join(binDir, binaryName);
          
          if (fs.existsSync(packagePath)) {
            const sourceBinary = path.join(packagePath, 'bin', binaryName);
            if (fs.existsSync(sourceBinary)) {
              if (!fs.existsSync(binDir)) {
                fs.mkdirSync(binDir, { recursive: true });
              }
              fs.copyFileSync(sourceBinary, targetBinary);
              if (platform !== 'win32') {
                fs.chmodSync(targetBinary, 0o755);
              }
              console.log(`Installed ${packageName} binary`);
              return;
            }
          }
          
          // Fallback: try to install the platform-specific package using npm
          console.log(`Platform package not found locally, installing ${packageName}...`);
          const { spawn } = require('child_process');
          
          const npmInstall = spawn('npm', ['install', `${packageName}@${version}`], {
            stdio: 'inherit',
            cwd: __dirname
          });
          
          npmInstall.on('close', (code) => {
            if (code === 0) {
              // Try again after install
              const newPackagePath = path.join(__dirname, 'node_modules', packageName);
              const sourceBinary = path.join(newPackagePath, 'bin', binaryName);
              
              if (fs.existsSync(sourceBinary)) {
                if (!fs.existsSync(binDir)) {
                  fs.mkdirSync(binDir, { recursive: true });
                }
                fs.copyFileSync(sourceBinary, targetBinary);
                if (platform !== 'win32') {
                  fs.chmodSync(targetBinary, 0o755);
                }
                console.log(`Successfully installed ${packageName} binary`);
              } else {
                console.error(`Binary not found after installing ${packageName}`);
                process.exit(1);
              }
            } else {
              console.error(`Failed to install ${packageName}`);
              console.log('You can install the platform-specific package directly:');
              console.log(`npm install -g ${packageName}`);
              process.exit(1);
            }
          });
          EOF
          
          # Create bin directory and wrapper
          mkdir -p gh-templates-unified/bin
          cat > gh-templates-unified/bin/gh-templates << 'EOF'
          #!/usr/bin/env node
          console.error('gh-templates binary not installed. Please run: npm install');
          process.exit(1);
          EOF
          chmod +x gh-templates-unified/bin/gh-templates
          
          cd gh-templates-unified
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-homebrew:
    name: Update Homebrew formula
    runs-on: macos-latest
    needs: publish-binaries
    steps:
      - name: Update Homebrew formula
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          
          # Get release assets - use platform-specific URLs
          LINUX_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gh-templates"
          DARWIN_ARM_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gh-templates"
          DARWIN_X64_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gh-templates"
          
          # Calculate checksums
          wget -q $LINUX_URL -O linux-binary
          wget -q $DARWIN_ARM_URL -O darwin-arm-binary
          wget -q $DARWIN_X64_URL -O darwin-x64-binary
          
          LINUX_SHA=$(shasum -a 256 linux-binary | cut -d' ' -f1)
          DARWIN_ARM_SHA=$(shasum -a 256 darwin-arm-binary | cut -d' ' -f1)
          DARWIN_X64_SHA=$(shasum -a 256 darwin-x64-binary | cut -d' ' -f1)
          
          # Clone or create homebrew tap
          if git clone https://github.com/rafaeljohn9/homebrew-tap.git; then
            cd homebrew-tap
          else
            echo "Failed to clone homebrew-tap, creating new repository structure"
            mkdir homebrew-tap
            cd homebrew-tap
            git init
            git remote add origin https://github.com/rafaeljohn9/homebrew-tap.git
          fi
          
          # Create Formula directory if it doesn't exist
          mkdir -p Formula
          
          # Create/update formula
          cat > Formula/gh-templates.rb << EOF
          class GhTemplates < Formula
            desc "GitHub Templates CLI tool"
            homepage "https://github.com/${{ github.repository }}"
            version "$VERSION"
            
            on_macos do
              if Hardware::CPU.arm?
                url "$DARWIN_ARM_URL"
                sha256 "$DARWIN_ARM_SHA"
              else
                url "$DARWIN_X64_URL"
                sha256 "$DARWIN_X64_SHA"
              end
            end
            
            on_linux do
              url "$LINUX_URL"
              sha256 "$LINUX_SHA"
            end
            
            def install
              bin.install "gh-templates"
            end

            test do
              system "#{bin}/gh-templates", "--version"
            end
          end
          EOF
          
          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/gh-templates.rb
          
          # Check if this is the first commit
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            git commit -m "Update gh-templates to $VERSION"
          else
            git commit -m "Initial commit: Add gh-templates formula $VERSION"
          fi
          
          git push https://x-access-token:${{ secrets.HOMEBREW_GITHUB_TOKEN }}@github.com/rafaeljohn9/homebrew-tap.git